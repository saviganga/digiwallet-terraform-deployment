# Generated by Django 3.2.9 on 2023-01-07 01:26

from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(max_length=15, unique=True, verbose_name='phone number')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(help_text='The first name as it appears on ID or passport', max_length=254, verbose_name='first name')),
                ('last_name', models.CharField(help_text='The first name as it appears on ID or passport', max_length=254, verbose_name='last name')),
                ('user_name', models.CharField(help_text='unique app identifier', max_length=254, unique=True, verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user is a verified user', verbose_name='user verified')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('source', models.CharField(blank=True, choices=[('USER-APP', 'User App'), ('INTERNAL-DASHBOARD', 'Internal Dashboard'), ('API', 'API')], help_text='SignUp App', max_length=20, null=True)),
                ('supported_country', models.CharField(default='NGA', max_length=100, null=True)),
                ('address', models.JSONField(default=dict)),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('OTHER', 'Other')], help_text='User gender', max_length=20, verbose_name='gender')),
                ('referral_code', models.CharField(help_text='User referral code', max_length=50, null=True, unique=True)),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='updated on')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('social_login', models.BooleanField(blank=True, default=False, null=True)),
                ('is_blocked', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-updated_on', '-date_joined'],
            },
        ),
    ]
